import datetime
from typing import Union

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton

from data.config import admins
from handlers.users.cancel import cancel
from keyboards.inline.get_days import dates_markup, months_markup, date_cd, hours_markup, continue_user_contact_markup, \
    check_user_contact_markup, choose_user_comment_markup, check_user_comment_markup, check_user_record_markup
from loader import dp, bot
from utils.db_api.commands import get_hour_by_id, update_record, add_user, get_user_by_id, get_user_record, get_months


async def list_months(message: Union[types.Message, types.CallbackQuery], year, **kwargs):
    markup = await months_markup(year=year)

    if isinstance(message, types.Message):
        try:
            user_records = await get_user_record(user_id=message.from_user.id)
            if len(user_records) == 2:
                for record in user_records:
                    message_text = f"<b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å.</b>\n\n" \
                                   f"–ó–∞–ø–∏—Å—å –Ω–∞ <b>{record.date} {record.start_hour}</b>\n" \
                                   f"–ö–æ–Ω—Ç–∞–∫—Ç –∏ –∑–∞–º–µ—Ç–∫–∞:\n" \
                                   f"{record.description}\n\n" \
                                   f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑\n" \
                                   f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üíº</b> --> <b>–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å</b>\n"
                    await message.answer(text=message_text)
            else:
                record = user_records[0]
                message_text = f"<b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å.</b>\n\n" \
                               f"–ó–∞–ø–∏—Å—å –Ω–∞ <b>{record.date} {record.start_hour}</b>\n" \
                               f"–ö–æ–Ω—Ç–∞–∫—Ç –∏ –∑–∞–º–µ—Ç–∫–∞:\n" \
                               f"{record.description}\n"
                if len(await get_months(year=year)) == 2:
                    message_text += f"\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ <b>–¥—Ä—É–≥–æ–π</b> –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Å—è—Ü."
                    await message.answer(text=message_text)
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", reply_markup=markup)
                else:
                    await message.answer(text=message_text)
        except:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", reply_markup=markup)

    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", reply_markup=markup)


async def list_dates(callback: types.CallbackQuery, year, month, **kwargs):
    markup = await dates_markup(day=datetime.datetime.now().day, year=year, month=month)
    await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=markup)


async def list_hours(callback: types.CallbackQuery, year, month, day, **kwargs):
    markup = await hours_markup(year=year, month=month, day=day)
    await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=markup)


async def info_continue(callback: types.CallbackQuery, year, month, day, hour_id, state: FSMContext, **kwargs):
    await state.update_data(hour_id=hour_id)
    try:
        data = await state.get_data()
        user_description = data["user_description"]
        await check_user_record(callback=callback, state=state)
    except:
        await callback.message.delete()
        await callback.message.answer(text="‚ÄºÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ‚ÄºÔ∏è\n\n"
                                           "–î–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 500‚ÇΩ\n\n"
                                           "<b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ:</b>\n"
                                           "1Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞ 2–µ —Å—É—Ç–æ–∫\n"
                                           "2Ô∏è‚É£ –û–ø–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç\n\n"
                                           "<b>–î–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
                                           "–ü—Ä–∏ –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç - –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è\n\n"
                                           "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –¢-–ë–∞–Ω–∫ –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏")
        markup = await continue_user_contact_markup(year=year, month=month, day=day)
        await callback.message.answer(
            text="–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è."
                 "–ù–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ "
                 "<b>–ù–∞–∑–∞–¥</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=markup)


async def get_user_contact(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    await state.set_state("get_user_contact")
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@dp.message_handler(state="get_user_contact")
async def check_user_contact(message: types.Message, state: FSMContext, **kwargs):
    async with state.proxy() as data:
        try:
            data["user_description"]["user_contact"] = message.text
        except:
            await state.update_data(user_description=dict(user_contact=message.text,
                                                          user_comment=None)
                                    )
    markup = await check_user_contact_markup()
    await message.answer(text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>, "
                              "–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–í–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑</b>\n\n"
                              f"{message.text}",
                         reply_markup=markup)


@dp.callback_query_handler(text="new_contact", state="get_user_contact")
async def new_user_contact(callback: types.CallbackQuery, **kwargs):
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@dp.callback_query_handler(text="confirm_contact", state="get_user_contact")
async def confirm_user_contact(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    markup = await choose_user_comment_markup()
    await callback.message.edit_text(
        text="–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞, "
             "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É</b>, "
             "–µ—Å–ª–∏ –≤ —ç—Ç–æ–º –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>",
        reply_markup=markup
    )
    await state.reset_state(with_data=False)


@dp.callback_query_handler(text="get_user_comment")
async def get_user_comment(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, "
                                       "—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É –∫ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:")
    await state.set_state("add_comment")


@dp.message_handler(state="add_comment")
async def add_comment(message: types.Message, state: FSMContext, **kwargs):
    async with state.proxy() as data:
        data["user_description"]["user_comment"] = message.text
    markup = await check_user_comment_markup()
    await message.answer(text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>, "
                              "–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–í–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑</b>\n\n"
                              f"{message.text}",
                         reply_markup=markup)


@dp.callback_query_handler(text="new_comment", state="add_comment")
async def new_user_comment(callback: types.CallbackQuery, **kwargs):
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, "
                                          "—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É –∫ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:")


@dp.callback_query_handler(text="check_user_record", state="add_comment")
async def confirm_user_comment(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    await state.reset_state(with_data=False)
    await check_user_record(callback=callback, state=state)


@dp.callback_query_handler(text="check_user_record")
async def check_user_record(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    data = await state.get_data()
    hour_id = int(data["hour_id"])
    user_contact = data["user_description"]["user_contact"]
    user_comment = data["user_description"]["user_comment"]
    open_hour = await get_hour_by_id(hour_id=hour_id)
    markup = await check_user_record_markup(year=open_hour.date[-4:])
    if user_comment:
        markup.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
                                        callback_data="get_user_comment")
                   )
    await callback.message.edit_text(text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏: \n\n"
                                          f"<u>–ó–∞–ø–∏—Å—å –Ω–∞</u> <b>{open_hour.date} - {open_hour.start_hour}</b>\n\n"
                                          f"<b>–ö–æ–Ω—Ç–∞–∫—Ç </b> {user_contact}\n\n"
                                          f"{'<b>–ó–∞–º–µ—Ç–∫–∞:</b> ' + user_comment if user_comment else ''}",
                                     reply_markup=markup)
    await state.reset_state(with_data=False)


@dp.callback_query_handler(text="create_record")
async def create_record(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    data = await state.get_data()
    hour_id = int(data["hour_id"])
    user_contact = data["user_description"]["user_contact"]
    user_comment = data["user_description"]["user_comment"]
    hour_obj = await get_hour_by_id(hour_id=hour_id)
    if hour_obj.reserved:
        await callback.message.edit_text(text="–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        day, month, year = hour_obj.date.split("/")
        markup = await hours_markup(year=year, month=month, day=day)
        await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=markup)
    else:
        try:
            user = await get_user_by_id(user_id=callback.from_user.id)
            try:
                user_record = [_ for _ in await get_user_record(user_id=user.user_id)][0]
                if hour_obj.date.split("/")[1] == user_record.date.split("/")[1]:
                    message_text = f"<b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å.</b>\n\n" \
                                   f"–ó–∞–ø–∏—Å—å –Ω–∞ <b>{user_record.date} {user_record.start_hour}</b>\n" \
                                   f"–ö–æ–Ω—Ç–∞–∫—Ç –∏ –∑–∞–º–µ—Ç–∫–∞:\n" \
                                   f"{user_record.description}\n\n" \
                                   f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ <b>–¥—Ä—É–≥–æ–π</b> –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Å—è—Ü."
                    await callback.message.edit_text(text=message_text)
                    await state.finish()
                    markup = await months_markup(year=int(hour_obj.date.split("/")[2]))
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", reply_markup=markup)
                    return
                else:
                    await update_record(hour_id=hour_id, user_reserved=user.user_id,
                                        description=f"{user_contact}\n"
                                                    f"{user_comment if user_comment else ''}", )
            except:
                await update_record(hour_id=hour_id, user_reserved=user.user_id,
                                    description=f"{user_contact}\n"
                                                f"{user_comment if user_comment else ''}", )
        except:
            await add_user(
                user_id=callback.from_user.id,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name,
                login=callback.from_user.username,
                contact=user_contact,
                comment=None,
            )
            await update_record(hour_id=hour_id, user_reserved=callback.from_user.id,
                                description=f"{user_contact}\n"
                                            f"{user_comment if user_comment else ''}", )
        open_hour = await get_hour_by_id(hour_id=hour_id)
        user = await get_user_by_id(user_id=callback.from_user.id)
        await bot.send_message(text=f"<b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!</b> \n\n"
                                    f"<u>–ó–∞–ø–∏—Å—å –Ω–∞</u> <b>{open_hour.date} - {open_hour.start_hour}</b>\n\n"
                                    f"–ö–ª–∏–µ–Ω—Ç:\n"
                                    f"{user.first_name} {user.last_name if user.last_name else ''} {'@' + user.login if user.login else ''}\n"
                                    f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
                                    f"{open_hour.description}",
                               chat_id=admins[0]
                               )
        await callback.message.edit_text(
            text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ <b>{open_hour.date} - {open_hour.start_hour}</b>")
        await state.finish()



@dp.callback_query_handler(date_cd.filter())
async def navigate(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    current_level = callback_data.get("level")
    year = callback_data.get("year")
    month = callback_data.get("month")
    day = callback_data.get("day")
    hour_id = callback_data.get("hour_id")
    levels = {
        "0": list_months,
        "1": list_dates,
        "2": list_hours,
        "3": info_continue,
        "4": get_user_contact,
        "9": cancel
    }
    current_level_function = levels[current_level]

    await current_level_function(
        call,
        state=state,
        year=int(year),
        month=int(month),
        day=int(day),
        hour_id=int(hour_id)
    )
